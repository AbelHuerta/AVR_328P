
practica_2_usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000866  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000742  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000386  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000042  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART0_Avr_Init>:
 *  Author: abelh
 */ 

#include "USART_avr.h"

void UART0_Avr_Init(uint32_t BaudRate){
  80:	9b 01       	movw	r18, r22
  82:	ac 01       	movw	r20, r24
	//CONFIGURACION DE BAUDIOS
	UBRR0 = (uint16_t) ((F_CPU/8UL/BaudRate) -1UL);
  84:	60 e8       	ldi	r22, 0x80	; 128
  86:	74 e8       	ldi	r23, 0x84	; 132
  88:	8e e1       	ldi	r24, 0x1E	; 30
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 84 00 	call	0x108	; 0x108 <__udivmodsi4>
  90:	21 50       	subi	r18, 0x01	; 1
  92:	31 09       	sbc	r19, r1
  94:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  98:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//CONFIGURACION DE UART0 DOBLE VELOCIDAD
	UCSR0A |= (1<<U2X0);
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
	
	//CONFIGURAMOS EL TIPO DE DATO A ENVIAR 8BITS
	UCSR0B &= ~(1<<UCSZ02);
  a6:	a1 ec       	ldi	r26, 0xC1	; 193
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	8c 91       	ld	r24, X
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	8c 93       	st	X, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00) ;
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
	
	//CONFIGURAR AL MODO ASINCRONO
	UCSR0C &= ~(1<<UMSEL00) & ~(1<<UMSEL01);
  ba:	80 81       	ld	r24, Z
  bc:	8f 73       	andi	r24, 0x3F	; 63
  be:	80 83       	st	Z, r24
	
	//CONFIGURAMOS LA PARIDAD
	UCSR0C &= ~(1<<UPM01) & ~(1<<UPM00);
  c0:	80 81       	ld	r24, Z
  c2:	8f 7c       	andi	r24, 0xCF	; 207
  c4:	80 83       	st	Z, r24
	
	//CONFIGURAR EL BIT DE STOP
	UCSR0C &= ~(1<<USBS0);
  c6:	80 81       	ld	r24, Z
  c8:	87 7f       	andi	r24, 0xF7	; 247
  ca:	80 83       	st	Z, r24
	
	//HABILITAMOS LA TX
	UCSR0B |= (1<<TXEN0);
  cc:	8c 91       	ld	r24, X
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	8c 93       	st	X, r24
  d2:	08 95       	ret

000000d4 <UART0_Avr_Print_Char>:
	
	
}

void UART0_Avr_Print_Char(char C){
	while((UCSR0A & (1<<UDRE0)) == 0);
  d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	95 ff       	sbrs	r25, 5
  da:	fc cf       	rjmp	.-8      	; 0xd4 <UART0_Avr_Print_Char>
	UDR0 = C;
  dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e0:	08 95       	ret

000000e2 <main>:
#include <stdio.h>
#include "USART_avr.h"

int main(void)
{
    UART0_Avr_Init(9600);
  e2:	60 e8       	ldi	r22, 0x80	; 128
  e4:	75 e2       	ldi	r23, 0x25	; 37
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 40 00 	call	0x80	; 0x80 <UART0_Avr_Init>
	
    while (1) 
    {
		UART0_Avr_Print_Char('S');
  ee:	83 e5       	ldi	r24, 0x53	; 83
  f0:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART0_Avr_Print_Char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	89 e6       	ldi	r24, 0x69	; 105
  f8:	98 e1       	ldi	r25, 0x18	; 24
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x18>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x22>
 104:	00 00       	nop
 106:	f3 cf       	rjmp	.-26     	; 0xee <main+0xc>

00000108 <__udivmodsi4>:
 108:	a1 e2       	ldi	r26, 0x21	; 33
 10a:	1a 2e       	mov	r1, r26
 10c:	aa 1b       	sub	r26, r26
 10e:	bb 1b       	sub	r27, r27
 110:	fd 01       	movw	r30, r26
 112:	0d c0       	rjmp	.+26     	; 0x12e <__udivmodsi4_ep>

00000114 <__udivmodsi4_loop>:
 114:	aa 1f       	adc	r26, r26
 116:	bb 1f       	adc	r27, r27
 118:	ee 1f       	adc	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	a2 17       	cp	r26, r18
 11e:	b3 07       	cpc	r27, r19
 120:	e4 07       	cpc	r30, r20
 122:	f5 07       	cpc	r31, r21
 124:	20 f0       	brcs	.+8      	; 0x12e <__udivmodsi4_ep>
 126:	a2 1b       	sub	r26, r18
 128:	b3 0b       	sbc	r27, r19
 12a:	e4 0b       	sbc	r30, r20
 12c:	f5 0b       	sbc	r31, r21

0000012e <__udivmodsi4_ep>:
 12e:	66 1f       	adc	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	88 1f       	adc	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	1a 94       	dec	r1
 138:	69 f7       	brne	.-38     	; 0x114 <__udivmodsi4_loop>
 13a:	60 95       	com	r22
 13c:	70 95       	com	r23
 13e:	80 95       	com	r24
 140:	90 95       	com	r25
 142:	9b 01       	movw	r18, r22
 144:	ac 01       	movw	r20, r24
 146:	bd 01       	movw	r22, r26
 148:	cf 01       	movw	r24, r30
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
