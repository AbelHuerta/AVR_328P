
EJEMPLO_1_TIMER_NORMAL_MODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000076e  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b0  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030b  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000017fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  88:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Timer1_init>:
#include <stdbool.h>
extern	volatile bool a;	

void Timer1_init(void){
	//TIMER 1 NORMAL MODE	
	TCCR1A &= ~(1<<WGM11) & ~(1<<WGM10);  
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8c 7f       	andi	r24, 0xFC	; 252
  98:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13) & ~(1<<WGM12);
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	87 7e       	andi	r24, 0xE7	; 231
  a2:	80 83       	st	Z, r24
	
	//HABILITAR EL CLOCK(PREESCALER) 1:64
	TCCR1B |= (1<<CS11) | (1<<CS10);
  a4:	80 81       	ld	r24, Z
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
  aa:	80 81       	ld	r24, Z
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	80 83       	st	Z, r24
	VALOR TIMER = 65536 - ((T x FOSC)/PRE)
	VALOR TIMER = 65536 - ((100ms x 16MHz)/64)
	VALOR TIMER = 65536 - 25000
	VALOR TIMER = 40536
	*/	
	TCNT1 = Valor_100ms;	
  b0:	88 e5       	ldi	r24, 0x58	; 88
  b2:	9e e9       	ldi	r25, 0x9E	; 158
  b4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  b8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	//CONFIGURAR INTERRUP POR DESBORDAMIENTO
	TIMSK1 |= (1<<TOIE1); //HABILITA LA INTERRUPCION
  bc:	ef e6       	ldi	r30, 0x6F	; 111
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <__vector_13>:
		
}

ISR(TIMER1_OVF_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	a = true;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	TCNT1 =Valor_100ms; //RECARGA DEL VALOR
  dc:	88 e5       	ldi	r24, 0x58	; 88
  de:	9e e9       	ldi	r25, 0x9E	; 158
  e0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  e4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= (1<<TOV1); //LIMPIA LA BANDERA
  e8:	86 b3       	in	r24, 0x16	; 22
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	86 bb       	out	0x16, r24	; 22
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:
volatile bool a= false;	


int main(void)
{
    Timer1_init();
  fc:	0e 94 48 00 	call	0x90	; 0x90 <Timer1_init>
	DDRC |= (1<<0);
 100:	87 b1       	in	r24, 0x07	; 7
 102:	81 60       	ori	r24, 0x01	; 1
 104:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<0); //INICIALMENTE APAGADO
 106:	88 b1       	in	r24, 0x08	; 8
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	88 b9       	out	0x08, r24	; 8
	sei(); //HABILITA INTERRUPCIONES
 10c:	78 94       	sei
    while (1) 
    {
		if(a){
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	88 23       	and	r24, r24
 114:	e1 f3       	breq	.-8      	; 0x10e <main+0x12>
			
			LedC0_Toggle();
 116:	98 b1       	in	r25, 0x08	; 8
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	89 27       	eor	r24, r25
 11c:	88 b9       	out	0x08, r24	; 8
			a=false;
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	f5 cf       	rjmp	.-22     	; 0x10e <main+0x12>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
