
ejemplo_Expansor_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e2  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076b  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c3  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f1  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  00001f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002055  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  9e:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_AVR_Init>:
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
  b0:	88 e4       	ldi	r24, 0x48	; 72
  b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b6:	08 95       	ret

000000b8 <I2C_AVR_START>:
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 6a       	ori	r24, 0xA4	; 164
  c0:	80 83       	st	Z, r24
  c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c6:	88 23       	and	r24, r24
  c8:	e4 f7       	brge	.-8      	; 0xc2 <I2C_AVR_START+0xa>
  ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	21 f0       	breq	.+8      	; 0xdc <I2C_AVR_START+0x24>
  d4:	80 31       	cpi	r24, 0x10	; 16
  d6:	19 f4       	brne	.+6      	; 0xde <I2C_AVR_START+0x26>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	08 95       	ret

000000e0 <I2C_AVR_ADDREES_SLAVE>:
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	61 70       	andi	r22, 0x01	; 1
  e4:	68 2b       	or	r22, r24
  e6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f4:	88 23       	and	r24, r24
  f6:	e4 f7       	brge	.-8      	; 0xf0 <I2C_AVR_ADDREES_SLAVE+0x10>
  f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	88 31       	cpi	r24, 0x18	; 24
 100:	21 f0       	breq	.+8      	; 0x10a <I2C_AVR_ADDREES_SLAVE+0x2a>
 102:	80 34       	cpi	r24, 0x40	; 64
 104:	19 f4       	brne	.+6      	; 0x10c <I2C_AVR_ADDREES_SLAVE+0x2c>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret

0000010e <I2C_AVR_Write_Data>:
 10e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	88 23       	and	r24, r24
 11e:	e4 f7       	brge	.-8      	; 0x118 <I2C_AVR_Write_Data+0xa>
 120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	88 32       	cpi	r24, 0x28	; 40
 128:	09 f4       	brne	.+2      	; 0x12c <I2C_AVR_Write_Data+0x1e>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret

0000012e <I2C_AVR_Stop>:
 12e:	ec eb       	ldi	r30, 0xBC	; 188
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 69       	ori	r24, 0x94	; 148
 136:	80 83       	st	Z, r24
 138:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13c:	84 ff       	sbrs	r24, 4
 13e:	fc cf       	rjmp	.-8      	; 0x138 <I2C_AVR_Stop+0xa>
 140:	08 95       	ret

00000142 <main>:
uint8_t unidades,decenas,centenas;
uint8_t Display_7Seg_A[10] = {0XC0,0XF9,0XA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90};

int main(void)
{
	I2C_AVR_Init();
 142:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_AVR_Init>
	for (;;)
	{
		for(centenas=0;centenas<10;centenas++){
 146:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <centenas>
 14a:	50 c0       	rjmp	.+160    	; 0x1ec <main+0xaa>
			I2C_AVR_START();
 14c:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_AVR_START>
			I2C_AVR_ADDREES_SLAVE(ADDS_PCF3,I2C_WRITE);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	86 e4       	ldi	r24, 0x46	; 70
 154:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_AVR_ADDREES_SLAVE>
			I2C_AVR_Write_Data(Display_7Seg_A[centenas]);
 158:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <centenas>
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e0 50       	subi	r30, 0x00	; 0
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	80 81       	ld	r24, Z
 164:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_AVR_Write_Data>
			for(decenas=0;decenas<10;decenas++){
 168:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 16c:	36 c0       	rjmp	.+108    	; 0x1da <main+0x98>
				I2C_AVR_START();
 16e:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_AVR_START>
				I2C_AVR_ADDREES_SLAVE(ADDS_PCF2,I2C_WRITE);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	8c e4       	ldi	r24, 0x4C	; 76
 176:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_AVR_ADDREES_SLAVE>
				I2C_AVR_Write_Data(Display_7Seg_A[decenas]);
 17a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 81       	ld	r24, Z
 186:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_AVR_Write_Data>
				
					for(unidades=0;unidades<10;unidades++){
 18a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <unidades>
 18e:	1c c0       	rjmp	.+56     	; 0x1c8 <main+0x86>
						I2C_AVR_START();
 190:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_AVR_START>
						I2C_AVR_ADDREES_SLAVE(ADDS_PCF1,I2C_WRITE);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_AVR_ADDREES_SLAVE>
						I2C_AVR_Write_Data(Display_7Seg_A[unidades]);
 19c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <unidades>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e0 50       	subi	r30, 0x00	; 0
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_AVR_Write_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	80 e7       	ldi	r24, 0x70	; 112
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x70>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x7a>
 1bc:	00 00       	nop
			for(decenas=0;decenas<10;decenas++){
				I2C_AVR_START();
				I2C_AVR_ADDREES_SLAVE(ADDS_PCF2,I2C_WRITE);
				I2C_AVR_Write_Data(Display_7Seg_A[decenas]);
				
					for(unidades=0;unidades<10;unidades++){
 1be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <unidades>
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <unidades>
 1c8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <unidades>
 1cc:	8a 30       	cpi	r24, 0x0A	; 10
 1ce:	00 f3       	brcs	.-64     	; 0x190 <main+0x4e>
	{
		for(centenas=0;centenas<10;centenas++){
			I2C_AVR_START();
			I2C_AVR_ADDREES_SLAVE(ADDS_PCF3,I2C_WRITE);
			I2C_AVR_Write_Data(Display_7Seg_A[centenas]);
			for(decenas=0;decenas<10;decenas++){
 1d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1de:	8a 30       	cpi	r24, 0x0A	; 10
 1e0:	30 f2       	brcs	.-116    	; 0x16e <main+0x2c>
int main(void)
{
	I2C_AVR_Init();
	for (;;)
	{
		for(centenas=0;centenas<10;centenas++){
 1e2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <centenas>
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <centenas>
 1ec:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <centenas>
 1f0:	8a 30       	cpi	r24, 0x0A	; 10
 1f2:	08 f4       	brcc	.+2      	; 0x1f6 <main+0xb4>
 1f4:	ab cf       	rjmp	.-170    	; 0x14c <main+0xa>
						I2C_AVR_Write_Data(Display_7Seg_A[unidades]);
						_delay_ms(50);
						}
			}
		}
		I2C_AVR_Stop();
 1f6:	0e 94 97 00 	call	0x12e	; 0x12e <I2C_AVR_Stop>
	}
 1fa:	a5 cf       	rjmp	.-182    	; 0x146 <main+0x4>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
