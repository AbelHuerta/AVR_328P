
ejemplo_DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003c2  00800100  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008004c2  008004c2  0000060a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099f  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077c  00000000  00000000  00001083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000478  00000000  00000000  000017ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d7  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  000021e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000232b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3c       	cpi	r26, 0xC2	; 194
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a2 ec       	ldi	r26, 0xC2	; 194
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3c       	cpi	r26, 0xC6	; 198
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9e:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_AVR_Init>:

uint8_t I2C_AVR_Read_Data(uint8_t *ptr_dato,uint8_t ack_nack){
	uint8_t status;
	
	return 1;
}
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
  b0:	88 e4       	ldi	r24, 0x48	; 72
  b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b6:	08 95       	ret

000000b8 <I2C_AVR_START>:
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 6a       	ori	r24, 0xA4	; 164
  c0:	80 83       	st	Z, r24
  c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c6:	88 23       	and	r24, r24
  c8:	e4 f7       	brge	.-8      	; 0xc2 <I2C_AVR_START+0xa>
  ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	21 f0       	breq	.+8      	; 0xdc <I2C_AVR_START+0x24>
  d4:	80 31       	cpi	r24, 0x10	; 16
  d6:	19 f4       	brne	.+6      	; 0xde <I2C_AVR_START+0x26>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	08 95       	ret

000000e0 <I2C_AVR_ADDREES_SLAVE>:
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	61 70       	andi	r22, 0x01	; 1
  e4:	68 2b       	or	r22, r24
  e6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f4:	88 23       	and	r24, r24
  f6:	e4 f7       	brge	.-8      	; 0xf0 <I2C_AVR_ADDREES_SLAVE+0x10>
  f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	88 31       	cpi	r24, 0x18	; 24
 100:	21 f0       	breq	.+8      	; 0x10a <I2C_AVR_ADDREES_SLAVE+0x2a>
 102:	80 34       	cpi	r24, 0x40	; 64
 104:	19 f4       	brne	.+6      	; 0x10c <I2C_AVR_ADDREES_SLAVE+0x2c>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret

0000010e <I2C_AVR_Write_Data>:
 10e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	88 23       	and	r24, r24
 11e:	e4 f7       	brge	.-8      	; 0x118 <I2C_AVR_Write_Data+0xa>
 120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	88 32       	cpi	r24, 0x28	; 40
 128:	09 f4       	brne	.+2      	; 0x12c <I2C_AVR_Write_Data+0x1e>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret

0000012e <I2C_AVR_Stop>:


void I2C_AVR_Stop(void){
	TWCR |= (1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
 12e:	ec eb       	ldi	r30, 0xBC	; 188
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 69       	ori	r24, 0x94	; 148
 136:	80 83       	st	Z, r24
	//ESPERAMOS QUE SE COMPLETE EL STOP
	while((TWCR & (1<<TWSTO))==1);
 138:	80 81       	ld	r24, Z
 13a:	08 95       	ret

0000013c <main>:
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_AVR_Init>
 140:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <i+0x1>
 144:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <i>
 148:	2a c0       	rjmp	.+84     	; 0x19e <main+0x62>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	fc 01       	movw	r30, r24
 150:	e0 50       	subi	r30, 0x00	; 0
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <Val_H>
 15c:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <__data_end>
 160:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_AVR_START>
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_AVR_ADDREES_SLAVE>
 16c:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Val_H>
 170:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_AVR_Write_Data>
 174:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <__data_end>
 178:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_AVR_Write_Data>
 17c:	0e 94 97 00 	call	0x12e	; 0x12e <I2C_AVR_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	8f e1       	ldi	r24, 0x1F	; 31
 182:	9e e4       	ldi	r25, 0x4E	; 78
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x48>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x4e>
 18a:	00 00       	nop
 18c:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <i>
 190:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <i+0x1>
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <i+0x1>
 19a:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <i>
 19e:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <i>
 1a2:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <i+0x1>
 1a6:	81 3e       	cpi	r24, 0xE1	; 225
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	92 07       	cpc	r25, r18
 1ac:	70 f2       	brcs	.-100    	; 0x14a <main+0xe>
 1ae:	c8 cf       	rjmp	.-112    	; 0x140 <main+0x4>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
