
ejmplo_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000184  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a8  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000728  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000455  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021e  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001f2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  8e:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <I2C_AVR_Init>:
		
	}
	
	
	return status;
}
  96:	e9 eb       	ldi	r30, 0xB9	; 185
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8c 7f       	andi	r24, 0xFC	; 252
  9e:	80 83       	st	Z, r24
  a0:	88 e4       	ldi	r24, 0x48	; 72
  a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  a6:	08 95       	ret

000000a8 <I2C_AVR_START>:
  a8:	ec eb       	ldi	r30, 0xBC	; 188
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	84 6a       	ori	r24, 0xA4	; 164
  b0:	80 83       	st	Z, r24
  b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b6:	88 23       	and	r24, r24
  b8:	e4 f7       	brge	.-8      	; 0xb2 <I2C_AVR_START+0xa>
  ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  be:	88 7f       	andi	r24, 0xF8	; 248
  c0:	88 30       	cpi	r24, 0x08	; 8
  c2:	21 f0       	breq	.+8      	; 0xcc <I2C_AVR_START+0x24>
  c4:	80 31       	cpi	r24, 0x10	; 16
  c6:	19 f4       	brne	.+6      	; 0xce <I2C_AVR_START+0x26>
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	08 95       	ret
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret

000000d0 <I2C_AVR_ADDREES_SLAVE>:
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	61 70       	andi	r22, 0x01	; 1
  d4:	68 2b       	or	r22, r24
  d6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e4:	88 23       	and	r24, r24
  e6:	e4 f7       	brge	.-8      	; 0xe0 <I2C_AVR_ADDREES_SLAVE+0x10>
  e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ec:	88 7f       	andi	r24, 0xF8	; 248
  ee:	88 31       	cpi	r24, 0x18	; 24
  f0:	21 f0       	breq	.+8      	; 0xfa <I2C_AVR_ADDREES_SLAVE+0x2a>
  f2:	80 34       	cpi	r24, 0x40	; 64
  f4:	19 f4       	brne	.+6      	; 0xfc <I2C_AVR_ADDREES_SLAVE+0x2c>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	08 95       	ret
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	08 95       	ret

000000fe <I2C_AVR_Write_Data>:
  fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 102:	84 e8       	ldi	r24, 0x84	; 132
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 108:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 10c:	88 23       	and	r24, r24
 10e:	e4 f7       	brge	.-8      	; 0x108 <I2C_AVR_Write_Data+0xa>
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 114:	88 7f       	andi	r24, 0xF8	; 248
 116:	88 32       	cpi	r24, 0x28	; 40
 118:	09 f4       	brne	.+2      	; 0x11c <I2C_AVR_Write_Data+0x1e>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	08 95       	ret

0000011e <I2C_AVR_Stop>:


void I2C_AVR_Stop(void){
	TWCR |= (1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 69       	ori	r24, 0x94	; 148
 126:	80 83       	st	Z, r24
	//ESPERAMOS QUE SE COMPLETE EL STOP
	while((TWCR & (1<<TWSTO))==0);
 128:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12c:	84 ff       	sbrs	r24, 4
 12e:	fc cf       	rjmp	.-8      	; 0x128 <I2C_AVR_Stop+0xa>
 130:	08 95       	ret

00000132 <Write_EEPROM_I2C>:
		
    }
}


void Write_EEPROM_I2C(char *ptr_Str, uint16_t ADD_EEP){
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
 13a:	16 2f       	mov	r17, r22
 13c:	87 2f       	mov	r24, r23
	I2C_AVR_Write_Data((uint8_t)(ADD_EEP>>8));	//HIGH BIT
 13e:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_AVR_Write_Data>
	I2C_AVR_Write_Data((uint8_t)(ADD_EEP));		//LOW BIT
 142:	81 2f       	mov	r24, r17
 144:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_AVR_Write_Data>
	while(*ptr_Str)
 148:	03 c0       	rjmp	.+6      	; 0x150 <Write_EEPROM_I2C+0x1e>
		I2C_AVR_Write_Data(*ptr_Str++);
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_AVR_Write_Data>


void Write_EEPROM_I2C(char *ptr_Str, uint16_t ADD_EEP){
	I2C_AVR_Write_Data((uint8_t)(ADD_EEP>>8));	//HIGH BIT
	I2C_AVR_Write_Data((uint8_t)(ADD_EEP));		//LOW BIT
	while(*ptr_Str)
 150:	88 81       	ld	r24, Y
 152:	81 11       	cpse	r24, r1
 154:	fa cf       	rjmp	.-12     	; 0x14a <Write_EEPROM_I2C+0x18>
		I2C_AVR_Write_Data(*ptr_Str++);
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	08 95       	ret

0000015e <main>:

void Write_EEPROM_I2C(char *ptr_Str, uint16_t ADD_EEP);

int main(void)
{
    I2C_AVR_Init();
 15e:	0e 94 4b 00 	call	0x96	; 0x96 <I2C_AVR_Init>
	
	I2C_AVR_START();
 162:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_AVR_START>
	I2C_AVR_ADDREES_SLAVE(EEPROM2,I2C_WRITE);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	80 ea       	ldi	r24, 0xA0	; 160
 16a:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_AVR_ADDREES_SLAVE>
	Write_EEPROM_I2C(Str_1,0x0028);
 16e:	68 e2       	ldi	r22, 0x28	; 40
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 99 00 	call	0x132	; 0x132 <Write_EEPROM_I2C>
	
	I2C_AVR_Stop();
 17a:	0e 94 8f 00 	call	0x11e	; 0x11e <I2C_AVR_Stop>
 17e:	ff cf       	rjmp	.-2      	; 0x17e <main+0x20>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
